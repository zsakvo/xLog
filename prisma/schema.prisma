// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String        @id @default(uuid())
    name          String
    username      String        @unique
    email         String        @unique
    emailVerified DateTime?
    avatar        String?
    bio           String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    deletedAt     DateTime?
    memberships   Membership[]
    accessTokens  AccessToken[]

    @@map("users")
}

model LoginToken {
    id            String   @id @default(uuid())
    email         String
    expiresAt     DateTime
    // When the login token is creating by submitting the `subscribe` form
    // We store extra info here, like `{email: true,telegram: true}`
    subscribeForm Json?

    @@map("login_tokens")
}

model AccessToken {
    id                String    @id @default(uuid())
    createdAt         DateTime  @default(now())
    name              String
    token             String    @unique
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    // Allow to get the access token via publicId in /api/login-complete
    publicId          String?   @unique
    publicIdExpiresAt DateTime?

    @@map("access_tokens")
}

enum MembershipRole {
    // The creator
    OWNER
    // The admins
    ADMIN
    // The subscribers
    SUBSCRIBER
}

model Membership {
    id             String         @id @default(uuid())
    createdAt      DateTime       @default(now())
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    site           Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
    userId         String
    siteId         String
    role           MembershipRole
    acceptedAt     DateTime?
    lastSwitchedTo DateTime       @default(now())
    config         Json           @default("{}")

    @@map("memberships")
}

model Site {
    id              String       @id @default(uuid())
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    name            String
    icon            String?
    subdomain       String       @unique
    pages           Page[]       @relation(name: "SitePages")
    domains         Domain[]     @relation(name: "SiteDomains")
    primaryDomain   Domain?      @relation(name: "SitePrimaryDomain", fields: [primaryDomainId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    primaryDomainId String?      @unique
    description     String?
    twitter         String?
    navigation      Json?
    deletedAt       DateTime?
    memberships     Membership[]

    @@map("sites")
}

enum PageType {
    POST
    PAGE
}

model Page {
    id                    String    @id @default(uuid())
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt
    contentUpdatedAt      DateTime  @default(now())
    publishedAt           DateTime  @default(now())
    published             Boolean   @default(false)
    type                  PageType  @default(POST)
    title                 String
    content               String
    excerpt               String?
    autoExcerpt           String?
    format                String    @default("markdown")
    slug                  String
    site                  Site      @relation(name: "SitePages", fields: [siteId], references: [id], onDelete: Cascade)
    siteId                String
    deletedAt             DateTime?
    subscribersNotifiedAt DateTime?

    @@unique([siteId, slug])
    @@map("pages")
}

model Domain {
    id                   String   @id @default(uuid())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    site                 Site     @relation(name: "SiteDomains", fields: [siteId], references: [id], onDelete: Cascade)
    siteId               String
    domain               String   @unique
    primaryDomainForSite Site?    @relation(name: "SitePrimaryDomain")

    @@map("domains")
}
